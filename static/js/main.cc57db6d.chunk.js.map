{"version":3,"sources":["components/core/NavBar/NavBarItem/NavBarItem.tsx","components/core/NavBar/NavBar.tsx","logic/redux/modules/dogImgsContent/selectors.ts","routes/routes.tsx","components/Home/Home.tsx","components/Sales/Sales.tsx","components/Labour/Labour.tsx","components/Settings/Settings.tsx","components/NoMatch.tsx","App.tsx","logic/redux/modules/dogImgsContent/actions.ts","logic/redux/modules/dogImgsContent/reducer.ts","logic/redux/reducers.ts","api/fetchPet.ts","logic/redux/modules/dogImgsContent/saga/workers/fetchPetImg.ts","logic/redux/modules/dogImgsContent/saga/watchers/fetchPetImg.ts","logic/redux/rootSaga.ts","logic/redux/store.ts","serviceWorker.ts","theme/customChakraTheme.ts","theme/fonts.tsx","index.tsx"],"names":["NavBarItem","props","match","useRouteMatch","href","styles","additionalStyles","isExact","Boolean","h","w","position","_before","before","_hover","hover","onClick","title","bgImage","imgActiveSrc","imgSrc","bgRepeat","bgSize","cursor","backgroundColor","div","backgroundImage","content","height","width","right","bottom","NavBar","dispatch","useDispatch","handleGoTo","push","direction","justify","background","py","pb","pl","data-testid","mb","flexGrow","justifyContent","alt","src","alignSelf","getPetImgData","state","petImage","routes","exact","path","component","useSelector","image","error","pending","px","rounded","shadow","fontSize","lineHeight","role","objectFit","App","history","fetchPetImg","createAction","fetchPetImgPending","fetchPetImgSuccess","fetchPetImgError","petImgReducer","createReducer","builder","addCase","action","payload","message","response","data","createRootReducer","combineReducers","router","connectRouter","fetchPetDog","breed","axios","get","fetchPetAsync","put","call","getPetImgWatcher","takeLatest","getPetImgWhenPageChanged","rootSaga","fork","createBrowserHistory","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","enhancers","applyMiddleware","routerMiddleware","run","window","location","hostname","defaultTheme","extendTheme","colors","accent","global","body","fonts","heading","Fonts","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cc57db6d.chunk.js","sourcesContent":["import { FC } from \"react\";\nimport { Center, Box } from \"@chakra-ui/react\";\nimport { useRouteMatch } from \"react-router\";\n\ntype Props = {\n  href: string;\n  onClick: () => void;\n  imgSrc: string;\n  imgActiveSrc: string;\n};\n\nexport const NavBarItem: FC<Props> = (props) => {\n  const match = useRouteMatch(props.href);\n  const styles = additionalStyles({ ...props, isExact: Boolean(match?.isExact) });\n\n  return (\n    <Center\n      h={[\"100%\", \"64px\"]}\n      w={[\"46px\", \"auto\"]}\n      position=\"relative\"\n      _before={styles.before}\n      _hover={styles.hover}\n      onClick={props.onClick}\n      title=\"navbar item\"\n    >\n      <Box bgImage={match?.isExact ? props.imgActiveSrc : props.imgSrc} bgRepeat=\"no-repeat\" bgSize=\"contain\" h=\"16px\" w=\"16px\" />\n    </Center>\n  );\n};\n\nconst additionalStyles = ({ imgActiveSrc, isExact }: Props & { isExact: boolean }) => ({\n  hover: {\n    cursor: \"pointer\",\n    \"&::before\": {\n      backgroundColor: \"accent\",\n    },\n    div: {\n      backgroundImage: imgActiveSrc,\n    },\n  },\n  before: {\n    content: `\"\"`,\n    height: [\"2px\", \"100%\"],\n    width: [\"100%\", \"2px\"],\n    backgroundColor: isExact ? \"accent\" : \"transparent\",\n    position: \"absolute\",\n    right: 0,\n    bottom: [0, \"auto\"],\n  },\n});\n","import { Flex, Box, Img, Center } from \"@chakra-ui/react\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\n\nimport { NavBarItem } from \"./NavBarItem/NavBarItem\";\n\nexport const NavBar = () => {\n  const dispatch = useDispatch();\n\n  const handleGoTo = (href: string) => () => {\n    dispatch(push(href));\n  };\n\n  return (\n    <Flex\n      direction={[\"row\", \"column\"]}\n      justify={[\"flex-end\", \"flex-start\"]}\n      width={[\"100%\", \"64px\"]}\n      background=\"#F0F5F9\"\n      height={[\"40px\", \"100vh\"]}\n      py={[0, \"18.8px\"]}\n      pb={[0, \"28px\"]}\n      pl={[\"8px\", 0]}\n      data-testid=\"testNavbar\"\n    >\n      <Flex w={[\"32px\", \"100%\"]} mb={[0, \"19px\"]} flexGrow={[1, 0]} justifyContent={[\"flex-start\", \"center\"]} onClick={handleGoTo(\"/\")}>\n        <Center>\n          <Img alt=\"Nory Logo\" src=\"https://nory.ai/static/media/n-logo.34190c70.svg\" _hover={{ cursor: \"pointer\" }} h=\"27px\" w=\"32px\" />\n        </Center>\n      </Flex>\n      <Flex w={[\"auto\", \"100%\"]} direction={[\"row\", \"column\"]} flexGrow={[0, 1]}>\n        <NavBarItem\n          onClick={handleGoTo(\"/labour\")}\n          href=\"/labour\"\n          imgSrc=\"./images/icons/calendar.svg\"\n          imgActiveSrc=\"./images/icons/calendar-active.svg\"\n        />\n        <NavBarItem\n          onClick={handleGoTo(\"/sales\")}\n          href=\"/sales\"\n          imgSrc=\"./images/icons/alarm.svg\"\n          imgActiveSrc=\"./images/icons/alarm-active.svg\"\n        />\n      </Flex>\n      <Box w={[\"auto\", \"100%\"]} h={[\"100%\", \"auto\"]} alignSelf=\"flex-end\">\n        <NavBarItem\n          onClick={handleGoTo(\"/settings\")}\n          href=\"/setting\"\n          imgSrc=\"./images/icons/settings.svg\"\n          imgActiveSrc=\"./images/icons/settings-active.svg\"\n        />\n      </Box>\n    </Flex>\n  );\n};\n","import { PetImgState } from \"../../../../types/common\";\nimport { RootState } from \"../../store\";\n\nexport const getPetImgData = (state: RootState): PetImgState => state.petImage;\n","import { Route, Switch } from \"react-router\";\nimport { Flex } from \"@chakra-ui/react\";\n\nimport { NavBar } from \"../components/core/NavBar/NavBar\";\nimport { Home } from \"../components/Home/Home\";\nimport { Sales } from \"../components/Sales/Sales\";\nimport { Labour } from \"../components/Labour/Labour\";\nimport { Settings } from \"../components/Settings/Settings\";\nimport { NoMatch } from \"../components/NoMatch\";\n\nconst routes = (\n  <Flex direction={[\"column\", \"row\"]}>\n    <NavBar />\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/sales\" component={Sales} />\n      <Route exact path=\"/labour\" component={Labour} />\n      <Route exact path=\"/settings\" component={Settings} />\n      <Route component={NoMatch} />\n    </Switch>\n  </Flex>\n);\n\nexport default routes;\n","import { Box, Heading, Image, Skeleton, Stack } from \"@chakra-ui/react\";\nimport { useSelector } from \"react-redux\";\nimport { getPetImgData } from \"../../logic/redux/modules/dogImgsContent/selectors\";\n\nexport const Home = () => {\n  const { image, error, pending } = useSelector(getPetImgData);\n\n  if (error) {\n    return <Heading>Something went wrong..</Heading>;\n  }\n\n  return (\n    <Box\n      py={[\"30px\", \"80px\"]}\n      px={[\"8px\", \"32px\"]}\n      rounded=\"4px\"\n      background=\"#fff\"\n      w=\"100%\"\n      h=\"100vh\"\n      shadow={[\"base\", \"none\"]}\n      data-testid=\"testHome\"\n    >\n      {pending && (\n        <>\n          <Stack>\n            <Skeleton height=\"20px\" />\n            <Skeleton height=\"20px\" />\n          </Stack>\n          <Skeleton h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} />\n        </>\n      )}\n      {image && (\n        <>\n          <Heading mb={[\"10px\", \"24px\"]} fontSize={[\"20px\", \"32px\"]} lineHeight={[\"24px\", \"32px\"]}>\n            Home page\n          </Heading>\n          <Image role=\"banner\" src={image} h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} objectFit=\"cover\" />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Heading, Box, Stack, Image, Skeleton } from \"@chakra-ui/react\";\nimport { useSelector } from \"react-redux\";\n\nimport { getPetImgData } from \"../../logic/redux/modules/dogImgsContent/selectors\";\n\nexport const Sales = () => {\n  const { image, error, pending } = useSelector(getPetImgData);\n\n  if (error) {\n    return <Heading>Something went wrong..</Heading>;\n  }\n\n  return (\n    <Box py={[\"30px\", \"80px\"]} px={[\"8px\", \"32px\"]} rounded=\"4px\" background=\"#fff\" w=\"100%\" h=\"100vh\" shadow={[\"base\", \"none\"]}>\n      {pending && (\n        <>\n          <Stack role=\"none\">\n            <Skeleton height=\"20px\" />\n            <Skeleton height=\"20px\" />\n          </Stack>\n          <Skeleton h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} />\n        </>\n      )}\n      {image && (\n        <>\n          <Heading role=\"heading\" mb={[\"10px\", \"24px\"]} fontSize={[\"20px\", \"32px\"]} lineHeight={[\"24px\", \"32px\"]}>\n            Labour page\n          </Heading>\n          <Image role=\"img\" src={image} h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} objectFit=\"cover\" />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Heading, Box, Stack, Image, Skeleton } from \"@chakra-ui/react\";\nimport { useSelector } from \"react-redux\";\n\nimport { getPetImgData } from \"../../logic/redux/modules/dogImgsContent/selectors\";\n\nexport const Labour = () => {\n  const { image, error, pending } = useSelector(getPetImgData);\n\n  if (error) {\n    return <Heading>Something went wrong..</Heading>;\n  }\n\n  return (\n    <Box py={[\"30px\", \"80px\"]} px={[\"8px\", \"32px\"]} rounded=\"4px\" background=\"#fff\" w=\"100%\" h=\"100vh\" shadow={[\"base\", \"none\"]}>\n      {pending && (\n        <>\n          <Stack>\n            <Skeleton height=\"20px\" />\n            <Skeleton height=\"20px\" />\n          </Stack>\n          <Skeleton h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} />\n        </>\n      )}\n      {image && (\n        <>\n          <Heading mb={[\"10px\", \"24px\"]} fontSize={[\"20px\", \"32px\"]} lineHeight={[\"24px\", \"32px\"]}>\n            Sales page\n          </Heading>\n          <Image src={image} h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} objectFit=\"cover\" />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Heading, Box, Image, Skeleton, Stack } from \"@chakra-ui/react\";\nimport { useSelector } from \"react-redux\";\n\nimport { getPetImgData } from \"../../logic/redux/modules/dogImgsContent/selectors\";\n\nexport const Settings = () => {\n  const { image, error, pending } = useSelector(getPetImgData);\n\n  if (error) {\n    return <Heading>Something went wrong..</Heading>;\n  }\n\n  return (\n    <Box py={[\"30px\", \"80px\"]} px={[\"8px\", \"32px\"]} rounded=\"4px\" background=\"#fff\" w=\"100%\" h=\"100vh\" shadow={[\"base\", \"none\"]}>\n      {pending && (\n        <>\n          <Stack>\n            <Skeleton height=\"20px\" />\n            <Skeleton height=\"20px\" />\n          </Stack>\n          <Skeleton h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} />\n        </>\n      )}\n      {image && (\n        <>\n          <Heading mb={[\"10px\", \"24px\"]} fontSize={[\"20px\", \"32px\"]} lineHeight={[\"24px\", \"32px\"]}>\n            Settings page\n          </Heading>\n          <Image src={image} h={[\"187px\", \"334px\"]} w={[\"304px\", \"544px\"]} objectFit=\"cover\" />\n        </>\n      )}\n    </Box>\n  );\n};\n","import { Flex, Heading, Link } from \"@chakra-ui/react\";\n\nexport const NoMatch = () => (\n  <Flex direction=\"column\">\n    <Heading>No Match</Heading>\n    <Link href=\"/\">Go home</Link>\n  </Flex>\n);\n","import { ConnectedRouter } from \"connected-react-router\";\nimport { History } from \"history\";\n\nimport routes from \"./routes/routes\";\n\ninterface AppProps {\n  history: History;\n}\n\nfunction App({ history }: AppProps) {\n  return <ConnectedRouter history={history}>{routes}</ConnectedRouter>;\n}\n\nexport default App;\n","import { AxiosError } from \"axios\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nimport { DogApiErrorResponse, DogApiResponse } from \"../../../../types/common\";\n\nexport const fetchPetImg = createAction(\"FETCH_PET_IMG\");\nexport const fetchPetImgPending = createAction(\"FETCH_PET_IMG_PENDING\");\nexport const fetchPetImgSuccess = createAction<DogApiResponse>(\"FETCH_PET_IMG_SUCCESS\");\nexport const fetchPetImgError = createAction<AxiosError<DogApiErrorResponse>>(\"FETCH_PET_IMG_ERROR\");\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { PetImgState } from \"../../../../types/common\";\nimport { fetchPetImgPending, fetchPetImgSuccess, fetchPetImgError } from \"./actions\";\n\nconst initialState: PetImgState = {\n  pending: false,\n  error: null,\n  image: \"\",\n};\n\nexport const petImgReducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(fetchPetImgPending, (state) => {\n      state.pending = true;\n      state.image = \"\";\n      state.error = null;\n    })\n    .addCase(fetchPetImgSuccess, (state, action) => {\n      state.image = action.payload.message;\n      state.pending = false;\n      state.error = null;\n    })\n    .addCase(fetchPetImgError, (state, action) => {\n      state.error = action.payload.response?.data || null;\n      state.pending = false;\n    });\n});\n","import { combineReducers } from \"redux\";\nimport { History } from \"history\";\nimport { RouterState, connectRouter } from \"connected-react-router\";\n\nimport { petImgReducer } from \"./modules/dogImgsContent/reducer\";\nimport { PetImgState } from \"../../types/common\";\n\nconst createRootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    petImage: petImgReducer,\n  });\n\nexport interface State {\n  router: RouterState;\n  petImg: PetImgState;\n}\n\nexport default createRootReducer;\n","import axios from \"axios\";\nimport { DogApiResponse } from \"../types/common\";\n\nexport const fetchPetDog = (breed?: string) =>\n  axios.get<DogApiResponse>(`https://dog.ceo/api/breed/${breed ? breed : \"akita\"}/images/random`);\n","import { call, put, StrictEffect } from \"redux-saga/effects\";\nimport { fetchPetDog } from \"../../../../../../api/fetchPet\";\nimport { fetchPetImgError, fetchPetImgPending, fetchPetImgSuccess } from \"../../actions\";\nimport { AxiosResponse, AxiosError } from \"axios\";\nimport { DogApiResponse, DogApiErrorResponse } from \"../../../../../../types/common\";\n\ntype Lal = AxiosResponse<DogApiResponse> | AxiosError<DogApiErrorResponse>;\n\nexport function* fetchPetAsync(): Generator<StrictEffect, any, Lal> {\n  try {\n    yield put(fetchPetImgPending());\n    const response = yield call(fetchPetDog);\n    if (\"data\" in response) {\n      yield put(fetchPetImgSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(fetchPetImgError(error));\n  }\n}\n","import { takeLatest } from \"redux-saga/effects\";\n\nimport { fetchPetImg } from \"../../actions\";\nimport { fetchPetAsync } from \"../workers/fetchPetImg\";\n\nexport function* getPetImgWatcher() {\n  yield takeLatest(fetchPetImg, fetchPetAsync);\n}\n","import { fork, takeLatest } from \"redux-saga/effects\";\n\nimport { getPetImgWatcher } from \"./modules/dogImgsContent/saga/watchers/fetchPetImg\";\nimport { fetchPetAsync } from \"./modules/dogImgsContent/saga/workers/fetchPetImg\";\n\nexport const CHANGE_PAGE_ROUTE = \"@@router/LOCATION_CHANGE\";\n\nexport function* getPetImgWhenPageChanged() {\n  yield takeLatest(CHANGE_PAGE_ROUTE, fetchPetAsync);\n}\n\nexport function* rootSaga() {\n  yield fork([getPetImgWatcher, getPetImgWhenPageChanged]);\n}\n","import { createBrowserHistory } from \"history\";\nimport { configureStore, ThunkAction, Action, applyMiddleware } from \"@reduxjs/toolkit\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport createRootReducer from \"./reducers\";\nimport { rootSaga } from \"./rootSaga\";\n\nexport const history = createBrowserHistory();\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: createRootReducer(history),\n  middleware: [],\n  enhancers: [applyMiddleware(routerMiddleware(history)), applyMiddleware(sagaMiddleware)],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { extendTheme } from \"@chakra-ui/react\";\n\nexport const defaultTheme = extendTheme({\n  colors: {\n    accent: \"#A086D4\",\n  },\n  styles: {\n    global: {\n      body: {\n        backgroundColor: [\"#E5E5E5\", \"#fff\"],\n      },\n    },\n  },\n\n  fonts: {\n    heading:\n      \"Epilogue, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif\",\n    body: \"Epilogue, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif\",\n  },\n});\n","import { Global } from \"@emotion/react\";\n\nconst Fonts = () => (\n  <Global\n    styles={`\n    /* vietnamese */\n    @font-face {\n      font-family: 'Epilogue';\n      font-style: normal;\n      font-weight: 700;\n      font-display: swap;\n      src: url(https://fonts.gstatic.com/s/epilogue/v4/O4ZMFGj5hxF0EhjimngomvnCCtqb30OX1zTSBJ_SqATfVXtUARs.woff) format('woff');\n      unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;\n    }\n    /* latin-ext */\n    @font-face {\n      font-family: 'Epilogue';\n      font-style: normal;\n      font-weight: 700;\n      font-display: swap;\n      src: url(https://fonts.gstatic.com/s/epilogue/v4/O4ZMFGj5hxF0EhjimngomvnCCtqb30OX1zTSBZ_SqATfVXtUARs.woff) format('woff');\n      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n    }\n    /* latin */\n    @font-face {\n      font-family: 'Epilogue';\n      font-style: normal;\n      font-weight: 700;\n      font-display: swap;\n      src: url(https://fonts.gstatic.com/s/epilogue/v4/O4ZMFGj5hxF0EhjimngomvnCCtqb30OX1zTSC5_SqATfVXtU.woff) format('woff');\n      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n    }\n      `}\n  />\n);\nexport default Fonts;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport App from \"./App\";\nimport { store, history } from \"./logic/redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { defaultTheme } from \"./theme/customChakraTheme\";\nimport Fonts from \"./theme/fonts\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider theme={defaultTheme}>\n        <Fonts />\n        <App history={history} />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}